// Code generated by mdatagen. DO NOT EDIT.

package metadata

import "go.opentelemetry.io/collector/confmap"

// MetricConfig provides common config for a particular metric.
type MetricConfig struct {
	Enabled bool `mapstructure:"enabled"`

	enabledSetByUser bool
}

func (ms *MetricConfig) Unmarshal(parser *confmap.Conf) error {
	if parser == nil {
		return nil
	}
	err := parser.Unmarshal(ms, confmap.WithErrorUnused())
	if err != nil {
		return err
	}
	ms.enabledSetByUser = parser.IsSet("enabled")
	return nil
}

// MetricsConfig provides config for wireguard_stats metrics.
type MetricsConfig struct {
	WireguardPeerNetworkIoUsageRxBytes MetricConfig `mapstructure:"wireguard.peer.network.io.usage.rx_bytes"`
	WireguardPeerNetworkIoUsageTxBytes MetricConfig `mapstructure:"wireguard.peer.network.io.usage.tx_bytes"`
}

func DefaultMetricsConfig() MetricsConfig {
	return MetricsConfig{
		WireguardPeerNetworkIoUsageRxBytes: MetricConfig{
			Enabled: true,
		},
		WireguardPeerNetworkIoUsageTxBytes: MetricConfig{
			Enabled: true,
		},
	}
}

// ResourceAttributeConfig provides common config for a particular resource attribute.
type ResourceAttributeConfig struct {
	Enabled bool `mapstructure:"enabled"`
}

// ResourceAttributesConfig provides config for wireguard_stats resource attributes.
type ResourceAttributesConfig struct {
	WireguardDeviceName ResourceAttributeConfig `mapstructure:"wireguard.device.name"`
	WireguardDeviceType ResourceAttributeConfig `mapstructure:"wireguard.device.type"`
	WireguardPeerName   ResourceAttributeConfig `mapstructure:"wireguard.peer.name"`
}

func DefaultResourceAttributesConfig() ResourceAttributesConfig {
	return ResourceAttributesConfig{
		WireguardDeviceName: ResourceAttributeConfig{
			Enabled: true,
		},
		WireguardDeviceType: ResourceAttributeConfig{
			Enabled: true,
		},
		WireguardPeerName: ResourceAttributeConfig{
			Enabled: true,
		},
	}
}

// MetricsBuilderConfig is a configuration for wireguard_stats metrics builder.
type MetricsBuilderConfig struct {
	Metrics            MetricsConfig            `mapstructure:"metrics"`
	ResourceAttributes ResourceAttributesConfig `mapstructure:"resource_attributes"`
}

func DefaultMetricsBuilderConfig() MetricsBuilderConfig {
	return MetricsBuilderConfig{
		Metrics:            DefaultMetricsConfig(),
		ResourceAttributes: DefaultResourceAttributesConfig(),
	}
}
